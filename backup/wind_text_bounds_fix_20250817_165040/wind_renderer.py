#!/usr/bin/env python3
"""
Wind Module Renderer f√∂r E-Paper V√§derstation - SYMMETRISK CYKEL-OPTIMERAD LAYOUT
Visar vindstyrka + vindriktning med fokus p√• snabba cykel-beslut

FIXAD SYMMETRISK layout (som andra moduler):
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ      üå™Ô∏è             ‚îÇ
‚îÇ                     ‚îÇ
‚îÇ   5.3 m/s           ‚îÇ ‚Üê HUVUDDATA PROMINENT
‚îÇ   M√•ttlig vind      ‚îÇ ‚Üê BESKRIVANDE TEXT BALANSERAD
‚îÇ                     ‚îÇ
‚îÇ      ‚ÜóÔ∏è N           ‚îÇ ‚Üê SEKUND√ÑRDATA DISKRET
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

FIXAR:
‚úÖ Modulram (som andra moduler har)
‚úÖ Balanserade element (lagom storlekar)
‚úÖ Symmetrisk centrering
‚úÖ M/S + beskrivning som HUVUDDATA
‚úÖ Vindriktning som sekund√§rdata
"""

from typing import Dict, List
from .base_renderer import ModuleRenderer

class WindRenderer(ModuleRenderer):
    """
    Renderer f√∂r wind-modul med SYMMETRISK CYKEL-FOKUSERAD layout
    
    FIXAR alla layout-problem:
    - L√§gger till modulram (som andra moduler)
    - Balanserar element-storlekar
    - Centrerar allt symmetriskt
    - G√∂r M/S + beskrivning till HUVUDDATA
    - Vindriktning som diskret sekund√§rdata
    """
    
    def render(self, x: int, y: int, width: int, height: int, 
               weather_data: Dict, context_data: Dict) -> bool:
        """
        Rendera wind-modul med FIXAD SYMMETRISK layout
        
        Args:
            x, y: Position p√• canvas
            width, height: Modulens storlek (240√ó200px f√∂r MEDIUM 1)
            weather_data: V√§derdata fr√•n weather_client
            context_data: Trigger context data
            
        Returns:
            True om rendering lyckades
        """
        try:
            self.logger.info(f"üå¨Ô∏è Renderar FIXAD SYMMETRISK wind-modul ({width}√ó{height})")
            
            # H√§mta vinddata med s√§ker fallback
            wind_speed = self.safe_get_value(weather_data, 'wind_speed', 0.0, float)
            wind_direction = self.safe_get_value(weather_data, 'wind_direction', 0.0, float)
            
            # Konvertera till svenska beskrivningar
            speed_description = self.icon_manager.get_wind_description_swedish(wind_speed)
            direction_short, cardinal_code = self.icon_manager.get_wind_direction_info(wind_direction)
            
            # === MODULRAM (som andra moduler har) ===
            self.draw.rectangle(
                [(x + 2, y + 2), (x + width - 2, y + height - 2)],
                outline=0,
                width=2
            )
            
            # === SYMMETRISK CENTRERAD LAYOUT ===
            
            # Ber√§kna center f√∂r symmetrisk layout
            center_x = x + width // 2
            
            # 1. ALLM√ÑN VINDIKON (√∂verst, centrerad, lagom storlek)
            general_wind_icon = self.icon_manager.get_system_icon('strong-wind', size=(40, 40))  # Lagom storlek
            if general_wind_icon:
                icon_x = center_x - 20  # Centrerad (40px/2 = 20px offset)
                icon_y = y + 25
                self.paste_icon_on_canvas(general_wind_icon, icon_x, icon_y)
            
            # 2. HUVUDDATA: M/S-V√ÑRDE (prominent men f√•r plats)
            ms_text = f"{wind_speed:.1f} m/s"
            text_bbox = self.get_text_bounds(ms_text, self.fonts.get('large_main', self.fonts.get('medium_main')))
            ms_x = center_x - text_bbox[0] // 2  # Centrerad
            ms_y = y + 80  # Under ikonen
            self.draw_text_with_fallback(
                (ms_x, ms_y),
                ms_text,
                self.fonts.get('large_main', self.fonts.get('medium_main')),  # Lagom font f√∂r att f√• plats
                fill=0
            )
            
            # 3. HUVUDDATA: BESKRIVANDE TEXT (balanserad storlek)
            desc_bbox = self.get_text_bounds(speed_description, self.fonts.get('medium_main', self.fonts.get('small_main')))
            desc_x = center_x - desc_bbox[0] // 2  # Centrerad
            desc_y = ms_y + 40  # Under M/S-v√§rdet
            self.draw_text_with_fallback(
                (desc_x, desc_y),
                speed_description,
                self.fonts.get('medium_main', self.fonts.get('small_main')),  # Balanserad storlek
                fill=0
            )
            
            # 4. SEKUND√ÑRDATA: PIL-IKON f√∂r riktning (l√§ngst ner, centrerad men diskret)
            cardinal_icon = self.icon_manager.get_wind_icon(cardinal_code, size=(24, 24))  # Diskret storlek
            direction_y_base = y + height - 45  # Fr√•n botten
            
            # Kombinerad bredd f√∂r pil + text f√∂r centrering
            direction_text_bbox = self.get_text_bounds(direction_short, self.fonts.get('small_main', self.fonts.get('small_desc')))
            combined_width = 24 + 8 + direction_text_bbox[0]  # ikon + mellanrum + text
            combined_x = center_x - combined_width // 2
            
            if cardinal_icon:
                self.paste_icon_on_canvas(cardinal_icon, combined_x, direction_y_base)
            
            # 5. SEKUND√ÑRDATA: Kort vindriktning (diskret, bredvid pil)
            direction_x = combined_x + 24 + 8  # Efter pil-ikon + mellanrum
            direction_y = direction_y_base + 2   # Lite justerad f√∂r vertikal centrering
            self.draw_text_with_fallback(
                (direction_x, direction_y),
                direction_short,
                self.fonts.get('small_main', self.fonts.get('small_desc')),  # Diskret storlek
                fill=0
            )
            
            self.logger.info(f"‚úÖ FIXAD SYMMETRISK cykel-optimerad wind-modul: {wind_speed:.1f}m/s {speed_description}, {direction_short}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Fel vid wind rendering: {e}")
            return self.render_fallback_content(
                x, y, width, height, 
                "Wind-data ej tillg√§nglig"
            )
    
    def get_required_data_sources(self) -> List[str]:
        """Wind-modul beh√∂ver SMHI prognosdata f√∂r vindstyrka och vindriktning"""
        return ['smhi']
    
    def get_module_info(self) -> Dict:
        """Metadata f√∂r wind-modul"""
        info = super().get_module_info()
        info.update({
            'purpose': 'Visa vindstyrka och vindriktning med svenska ben√§mningar',
            'data_sources': ['SMHI vindprognoser (ws + wd parametrar)'],
            'layout': 'Ers√§tter barometer-modulen (MEDIUM 1 position)',
            'features': [
                '‚úÖ FIXAD LAYOUT: Modulram som andra moduler',
                '‚úÖ SYMMETRISK CENTRERING: Alla element balanserade',
                '‚úÖ HUVUDDATA PROMINENT: M/S + beskrivning som fokus',
                '‚úÖ LAGOM STORLEKAR: Ikoner och text f√•r plats i modulen',
                '‚úÖ SEKUND√ÑRDATA DISKRET: Vindriktning mindre men synlig',
                '‚úÖ CYKEL-OPTIMERAD: Snabb avl√§sning f√∂r cykel-beslut',
                'M/S-v√§rde LAGOM STORT (large_main font) - f√•r plats i ram',
                'Beskrivande text BALANSERAD (medium_main font)',
                'Allm√§n vindikon LAGOM (40px) - synlig men tar inte √∂ver',
                'Vindriktning DISKRET (24px pil + small_main text)',
                'Korta svenska vindf√∂rkortningar (SV, NO, etc.)',
                'Symmetrisk centrering f√∂r professionell look som andra moduler'
            ]
        })
        return info